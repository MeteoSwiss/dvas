# Copyright (c) 2020-2022 MeteoSwiss, contributors listed in AUTHORS.
#
# Distributed under the terms of the GNU General Public License v3.0 or later.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file contains the extraction details for M10 GDP and MDP files.
# It must absolutely have the string 'origdata' in its name, to match the dvas class names.
# --------------------------------------------------------------------------------------------------

# ----------------------------------------------------
# M10 MDP (default)
# ----------------------------------------------------
_M10:

    # -- META DATA ----------------------------------
    edt: "to_datetime(get('event_dt'))"
    srn: "get('srn')"
    pid: "get('product_id')"
    tags:
        - "cat('e:', get('event_id'))"
        - "cat('r:', get('rig'))"
    metadata:
        bpt_time:
        start_time: "to_datetime(get('start_time'))"

    # -- ORIG DATA ----------------------------------
    csv_delimiter:
    csv_skip_blank_lines: False
    csv_delim_whitespace: True
    csv_skiprows: 0
    csv_skipfooter: 0
    csv_encoding:
    csv_na_values:
    csv_header: 0

    _time:
        value: get('Time', 'rel')

    _alt_ref:
        value: get('Altitude')

    _gph:
        value: get('Altitude')

    _temp:
        value: get('T', 'c2k')

    _pres:
        value: get('Press')

    _rh:
        value: get('U')

    _wdir:
        value: get('WindD')

    _wspeed:
        value: get('WindF')

# ----------------------------------------------------
# M10 GDP, version alpha-2
# ----------------------------------------------------
_M10-GDP-ALPHA_002:

    # -- META DATA ----------------------------------
    edt: "to_datetime(get('g.Measurement.StandardTime'))"
    srn: "get('g.MainSonde.SerialNumber')"
    pid: "get('g.Product.Id')"
    tags:
        - "cat('e:', get('g.Measurement.Id'))"
        - "cat('r:', get('g.Measurement.BalloonNumber'))"
    metadata:
        bpt_time:
        start_time: "to_datetime(get('time_coverage_start'))"

    # -- ORIG DATA ----------------------------------
    _time:
        value: get('time', 'rel')

    _alt_ref:
        value: get('alt_gph')

    _gph:
        value: get('alt_gph')

    _gph_uct:
        value: get('alt_gph_uc', 'div2')  # Go from K=2 to K=1

    #TODO:
    # alt_gph_uc_noise -> ucu ?
    # sqrt(alt_gph_uc_repe**2 + alt_gph_uc_manuf**2) -> uct ?

    #_gph_ucu:
    #    value: 'alt_gph_uc_ucor'

    _temp:
        value: get('temp')

    #_temp_ucr:
    #    value: 'temp_uc_ucor'

    #_temp_ucs:
    #    value: 'temp_uc_scor'

    _temp_uct:
        value: get('temp_uc', 'div2')  # Go from K=2 to K=1

    #_temp_flag:
    #    value: 0
    #    csv_use_default: True

    _pres:
        value: get('press_gnss')

    #TODO:
    _pres_uct:
        value: get('press_uc', 'div2')  # Go from K=2 to K=1

    #TODO: is this assignment correct ?
    #_pres_ucu:
    #    value: get('press_gnss_uc_noise', 'div2')  # Go from K=2 to K=1

    _rh:
        value: get('rh')

    #_rh_ucr:
    #    value: 'rh_uc_ucor'

    _rh_uct:
        value: get('rh_uc', 'div2')  # Go from K=2 to K=1

    _wdir:
        value: get('wdir')

    _wdir_ucu:
        value: get('wdir_uc', 'div2')  # Go from K=2 to K=1

    _wspeed:
        value: get('wspeed')

    _wspeed_ucu:
        value: get('wspeed_uc', 'div2')  # Go from K=2 to K=1


# ----------------------------------------------------
# M10 GDP, version alpha-5
# ----------------------------------------------------
_M10-GDP-ALPHA_005:

    # -- META DATA ----------------------------------
    edt: "to_datetime(get('g.Measurement.StandardTime'))"
    srn: "get('g.MainSonde.SerialNumber')"
    pid: "get('g.Product.Id')"
    tags:
        - "cat('e:', get('g.Measurement.Id'))"
        - "cat('r:', get('g.Measurement.BalloonNumber'))"
    metadata:
        bpt_time:
        start_time: "to_datetime(get('time_coverage_start'))"

    # -- ORIG DATA ----------------------------------
    _time:
        value: get('time', 'rel')

    _alt_ref:
        value: get('alt_gph')

    _gph:
        value: get('alt_gph')

    _gph_uct:
        value: get('alt_gph_uc', 'div2')  # Go from K=2 to K=1

    #TODO:
    # alt_gph_uc_noise -> ucu ?
    # sqrt(alt_gph_uc_repe**2 + alt_gph_uc_manuf**2) -> uct ?

    #_gph_ucu:
    #    value: 'alt_gph_uc_ucor'

    _temp:
        value: get('temp')

    #_temp_ucr:
    #    value: 'temp_uc_ucor'

    #_temp_ucs:
    #    value: 'temp_uc_scor'

    _temp_uct:
        value: get('temp_uc', 'div2')  # Go from K=2 to K=1

    #_temp_flag:
    #    value: 0
    #    csv_use_default: True

    _pres:
        value: get('press_gnss')

    #TODO:
    _pres_uct:
        value: get('press_uc', 'div2')  # Go from K=2 to K=1

    #TODO: is this assignment correct ?
    #_pres_ucu:
    #    value: get('press_gnss_uc_noise', 'div2')  # Go from K=2 to K=1

    _rh:
        value: get('rh')

    #_rh_ucr:
    #    value: 'rh_uc_ucor'

    _rh_uct:
        value: get('rh_uc', 'div2')  # Go from K=2 to K=1

    _wdir:
        value: get('wdir')

    _wdir_ucu:
        value: get('wdir_uc', 'div2')  # Go from K=2 to K=1

    _wspeed:
        value: get('wspeed')

    _wspeed_ucu:
        value: get('wspeed_uc', 'div2')  # Go from K=2 to K=1


# ----------------------------------------------------
# M10 GDP, version alpha-5x
# ----------------------------------------------------
_M10-GDP-ALPHA_105:

    # -- META DATA ----------------------------------
    edt: "to_datetime(get('g.Measurement.StandardTime'))"
    srn: "get('g.MainSonde.SerialNumber')"
    pid: "get('g.Product.Id')"
    tags:
        - "cat('e:', get('g.Measurement.Id'))"
        - "cat('r:', get('g.Measurement.BalloonNumber'))"
    metadata:
        bpt_time:
        start_time: "to_datetime(get('time_coverage_start'))"

    # -- ORIG DATA ----------------------------------
    _time:
        value: get('time', 'rel')

    _alt_ref:
        value: get('alt_gph')

    _gph:
        value: get('alt_gph')

    _gph_ucu:
        value: get('alt_gph_uc_noise', 'div2')  # Go from K=2 to K=1

    #TODO: confirm alt_gph_uc_manuf and alt_gph_uc_repe are indeed correlated.
    # Note: alt_gph_uc_repe and alt_gph_uc_manuf are given as scalars. So I cannot use them
    # directly, and need to do total-ucu instead ... sigh ...
    _gph_uct:
        value: >-
            sqrt(sub(pow(get('alt_gph_uc', 'div2'), 2), pow(get('alt_gph_uc_noise', 'div2'), 2)))

    _temp:
        value: get('temp')

    #TODO: Not having any ucu is problematic for the KS test.
    _temp_uct:
        value: get('temp_uc', 'div2')  # Go from K=2 to K=1

    #_temp_flag:
    #    value: 0
    #    csv_use_default: True

    _pres:
        value: get('press')

    #TODO: this looks full of NaNs
    #TODO: can I use press_uc_noise/repe for ucu/uct ?
    _pres_uct:
        value: get('press_uc', 'div2')  # Go from K=2 to K=1

    _rh:
        value: get('rh')

    #TODO: Not having any ucu is problematic for the KS test.
    _rh_uct:
        value: get('rh_uc', 'div2')  # Go from K=2 to K=1

    _wdir:
        value: get('wdir')

    #TODO: wdir_uc is actually comprised of a manuf source that should be a uct source ... but
    # it is not accessible as is in v5.1. Assigning the total to ucu, which dominates the budget.
    _wdir_ucu:
        value: get('wdir_uc', 'div2')  # Go from K=2 to K=1

    _wspeed:
        value: get('wspeed')

    #TODO: wspeed_uc is actually comprised of a manuf source that should bea  uct source ... but
    # it is not accessible as is in v5.1. Assigning the total to ucu, which dominates the budget.
    _wspeed_ucu:
        value: get('wspeed_uc', 'div2')  # Go from K=2 to K=1
