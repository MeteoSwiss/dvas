# Copyright (c) 2020-2022 MeteoSwiss, contributors listed in AUTHORS.
#
# Distributed under the terms of the GNU General Public License v3.0 or later.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file contains the extraction details for RS92 GDP and MDP files.
# It must absolutely have the string 'origdata' in its name, to match the dvas class names.
# --------------------------------------------------------------------------------------------------

# ----------------------------------------------------
# RS-92 MDP (MCH current format)
# ----------------------------------------------------
_RS92:

    # -- META DATA ----------------------------------
    edt: "to_datetime(get('event_dt'))"
    srn: "get('srn')"
    pid: "get('product_id')"
    tags:
        - "cat('e:', get('event_id'))"
        - "cat('r:', get('rig_id'))"
    metadata:
        first_timestamp: "to_datetime(get('first_timestamp'))"
        launch_timestamp: "to_datetime(get('launch_timestamp'))"
        burst_timestamp: "to_datetime(get('burst_timestamp'))"

    # -- ORIG DATA ----------------------------------
    csv_delimiter:
    csv_skip_blank_lines: True
    csv_delim_whitespace: True
    csv_skiprows: 1
    csv_skipfooter: 0
    csv_encoding:
    csv_na_values:
    csv_header: 0

    _time:
        value: get('Time')

    _alt_ref:
        value: get('Height')

    _gph:
        value: get('Height')

    _temp:
        value: get('T', 'c2k')

    _temp_flag:
        value: get(0)
        csv_use_default: True

    _pres:
        value: get('P')

    _rh:
        value: get('U')

    _wdir:
        value: get('WD')

    _wspeed:
        value: get('WS')

# ----------------------------------------------------
# RS92-GDP, version 2
# ----------------------------------------------------
_RS92-GDP_002:

    # -- META DATA ----------------------------------
    edt: "to_datetime(cat(get('g.Ascent.StandardTime'),'Z'))"
    srn: "get('g.Instrument.SerialNumber')"
    pid: "get('g.Product.ID')"
    tags:
        - "cat('e:', get('g.Ascent.ID'))"
        - "cat('r:', get('g.Ascent.BalloonNumber'))"
    metadata:
        first_timestamp: "to_datetime(get('g.Ascent.StartTime'))"
        launch_timestamp: "to_datetime(get('g.Ascent.StartTime'))"
        burst_timestamp:

    # -- ORIG DATA ----------------------------------
    _time:
        value: get('time')

    _alt_ref:
        value: get('geopot')

    _gph:
        value: get('geopot')
    _gph_uct:
        # From Dirksen et al. (2014): "The uncertainty of the gopotential height is identical
        # to the uncertainty in the geometric altitude".
        value: get('u_alt')

    _temp:
        value: get('temp')
    _temp_uct:
        value: get('u_cor_temp')
    _temp_ucu:
        # In v2 of the GDP, this value is wrong. It must be reconstructed from:
        # value: sqrt('u_temp'**2 - 'u_cor_temp'**2)
        # See GRUAN TD4, section 5.1 for details.
        value: >-
            sqrt(sub(pow(get('u_temp'), 2), pow(get('u_cor_temp'), 2)))

    _pres:
        value: get('press')
    _pres_uct:
        value: get('u_press')

    _rh:
        value: mul(get('rh'), 100) # Convert to %
    _rh_uct:
        value: mul(get('u_cor_rh'), 100) # Convert to %
    _rh_ucu:
        # In v2 of the GDP, this value is wrong. It must be reconstructed from:
        # value: sqrt('u_rh'**2 - 'u_cor_rh'**2)
        # See GRUAN TD4, section 5.1 for details.
        # Also, convert this to %
        value: >-
            mul(sqrt(sub(pow(get('u_rh'), 2), pow(get('u_cor_rh'), 2))), 100)

    _wdir:
        value: get('wdir')
    _wdir_ucu:
        value: get('u_wdir')

    _wspeed:
        value: get('wspeed')
    _wspeed_ucu:
        value: get('u_wspeed')
